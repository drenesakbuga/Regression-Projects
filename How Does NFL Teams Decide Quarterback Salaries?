How Does NFL Teams Decide Quarterback Salaries?

{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "4024e00a-35d4-435f-b604-f9916ddb1e0c",
   "metadata": {
    "tags": []
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "42cfb93b-fd52-4fca-8bae-666766549ed8",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "a2886296-bc71-45a5-acec-a14ccc0eb580",
   "metadata": {
    "collapsed": true,
    "jupyter": {
     "outputs_hidden": true
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                Player    Salary  Pass_completion  TDs  Yds_game\n",
      "0       Derek Anderson   6450000             44.5    3     111.0\n",
      "1            Tom Brady   8007280             65.7   28     274.9\n",
      "2           Drew Brees  12989500             70.6   34     292.5\n",
      "3          Marc Bulger   6507280             56.7    5     163.2\n",
      "4       Jason Campbell   2864780             64.5   20     226.1\n",
      "5          Matt Cassel  15005200             55.0   16     194.9\n",
      "6        Kerry Collins   8507280             55.1    6     175.0\n",
      "7     Daunte Culpepper   5050000             56.7    3     118.1\n",
      "8           Jay Cutler  22044090             60.5   27     229.1\n",
      "9        Jake Delhomme   6325000             55.5    7     183.2\n",
      "10         Brett Favre  12000000             68.4   33     262.6\n",
      "11    Ryan Fitzpatrick   2995590             55.9    9     142.2\n",
      "12          Joe Flacco   8601760             63.1   21     225.8\n",
      "13       David Garrard   8500000             60.9   15     224.8\n",
      "14     Matt Hasselbeck   6256240             60.0   17     216.4\n",
      "15         Eli Manning  20500000             62.3   27     251.3\n",
      "16      Peyton Manning  14005720             68.8   33     281.3\n",
      "17        Luke McCrown   5006760             33.3    0       0.7\n",
      "18      Donovan McNabb  12507280             60.3   22     253.8\n",
      "19       Carson Palmer   9500000             60.5   21     193.4\n",
      "20     Chad Pennington   5750000             68.9    1     137.7\n",
      "21       Philip Rivers  25556630             65.2   28     265.9\n",
      "22       Aaron Rodgers   8600000             64.7   30     277.1\n",
      "23  Ben Roethlisberger   7751560             66.6   26     288.5\n",
      "24    JaMarcus Russell  11255440             48.8    3     107.3\n",
      "25        Mmatt Schaub  17000000             67.9   29     298.1\n",
      "26         Chris Simms   3466500             29.4    0       7.7\n",
      "27       Alex D. Smith   4007280             60.5   18     213.6\n",
      "28    Matthew Stafford   3100000             53.3   13     226.7\n",
      "29         Kurt Warner  19004680             66.1   26     250.2\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "data = pd.read_csv(\"Desktop/Python Data/QuarterbackSalaryData.csv\")\n",
    "\n",
    "print(data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "846f0b15-dc4a-4836-b219-c46d6cda006a",
   "metadata": {
    "collapsed": true,
    "jupyter": {
     "outputs_hidden": true
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                Player    Salary  Pass_completion  TDs  Yds_game\n",
      "0       Derek Anderson   6450000             44.5    3     111.0\n",
      "1            Tom Brady   8007280             65.7   28     274.9\n",
      "2           Drew Brees  12989500             70.6   34     292.5\n",
      "3          Marc Bulger   6507280             56.7    5     163.2\n",
      "4       Jason Campbell   2864780             64.5   20     226.1\n",
      "5          Matt Cassel  15005200             55.0   16     194.9\n",
      "6        Kerry Collins   8507280             55.1    6     175.0\n",
      "7     Daunte Culpepper   5050000             56.7    3     118.1\n",
      "8           Jay Cutler  22044090             60.5   27     229.1\n",
      "9        Jake Delhomme   6325000             55.5    7     183.2\n",
      "10         Brett Favre  12000000             68.4   33     262.6\n",
      "11    Ryan Fitzpatrick   2995590             55.9    9     142.2\n",
      "12          Joe Flacco   8601760             63.1   21     225.8\n",
      "13       David Garrard   8500000             60.9   15     224.8\n",
      "14     Matt Hasselbeck   6256240             60.0   17     216.4\n",
      "15         Eli Manning  20500000             62.3   27     251.3\n",
      "16      Peyton Manning  14005720             68.8   33     281.3\n",
      "17        Luke McCrown   5006760             33.3    0       0.7\n",
      "18      Donovan McNabb  12507280             60.3   22     253.8\n",
      "19       Carson Palmer   9500000             60.5   21     193.4\n",
      "20     Chad Pennington   5750000             68.9    1     137.7\n",
      "21       Philip Rivers  25556630             65.2   28     265.9\n",
      "22       Aaron Rodgers   8600000             64.7   30     277.1\n",
      "23  Ben Roethlisberger   7751560             66.6   26     288.5\n",
      "24    JaMarcus Russell  11255440             48.8    3     107.3\n",
      "25        Mmatt Schaub  17000000             67.9   29     298.1\n",
      "26         Chris Simms   3466500             29.4    0       7.7\n",
      "27       Alex D. Smith   4007280             60.5   18     213.6\n",
      "28    Matthew Stafford   3100000             53.3   13     226.7\n",
      "29         Kurt Warner  19004680             66.1   26     250.2\n"
     ]
    }
   ],
   "source": [
    "df = pd.DataFrame(data)\n",
    "\n",
    "print(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "595af617-d375-46cc-85cb-962d194af3fa",
   "metadata": {
    "collapsed": true,
    "jupyter": {
     "outputs_hidden": true
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 6450000  8007280 12989500  6507280  2864780 15005200  8507280  5050000\n",
      " 22044090  6325000 12000000  2995590  8601760  8500000  6256240 20500000\n",
      " 14005720  5006760 12507280  9500000  5750000 25556630  8600000  7751560\n",
      " 11255440 17000000  3466500  4007280  3100000 19004680]\n"
     ]
    }
   ],
   "source": [
    "y = np.array(df['Salary'])\n",
    "\n",
    "print(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "8c6f9273-6106-496a-8c51-3d2599d5eea3",
   "metadata": {
    "collapsed": true,
    "jupyter": {
     "outputs_hidden": true
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 6450000  8007280 12989500  6507280  2864780 15005200  8507280  5050000\n",
      " 22044090  6325000 12000000  2995590  8601760  8500000  6256240 20500000\n",
      " 14005720  5006760 12507280  9500000  5750000 25556630  8600000  7751560\n",
      " 11255440 17000000  3466500  4007280  3100000 19004680]\n"
     ]
    }
   ],
   "source": [
    "y = np.array(df['Salary'])\n",
    "\n",
    "print(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "a861935f-7657-4815-9ecc-972f5bd2fb78",
   "metadata": {
    "collapsed": true,
    "jupyter": {
     "outputs_hidden": true
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[44.5 65.7 70.6 56.7 64.5 55.  55.1 56.7 60.5 55.5 68.4 55.9 63.1 60.9\n",
      " 60.  62.3 68.8 33.3 60.3 60.5 68.9 65.2 64.7 66.6 48.8 67.9 29.4 60.5\n",
      " 53.3 66.1]\n"
     ]
    }
   ],
   "source": [
    "x1 = np.array(df['Pass_completion'])\n",
    "\n",
    "print(x1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "440808d5-32a2-4b30-b098-dacb9fae5fb2",
   "metadata": {
    "collapsed": true,
    "jupyter": {
     "outputs_hidden": true
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 3 28 34  5 20 16  6  3 27  7 33  9 21 15 17 27 33  0 22 21  1 28 30 26\n",
      "  3 29  0 18 13 26]\n"
     ]
    }
   ],
   "source": [
    "x2 = np.array(df['TDs'])\n",
    "\n",
    "print(x2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "482f7e64-fadd-4f64-bca5-ef94f51f7c88",
   "metadata": {
    "collapsed": true,
    "jupyter": {
     "outputs_hidden": true
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[111.  274.9 292.5 163.2 226.1 194.9 175.  118.1 229.1 183.2 262.6 142.2\n",
      " 225.8 224.8 216.4 251.3 281.3   0.7 253.8 193.4 137.7 265.9 277.1 288.5\n",
      " 107.3 298.1   7.7 213.6 226.7 250.2]\n"
     ]
    }
   ],
   "source": [
    "x3 = np.array(df['Yds_game'])\n",
    "\n",
    "print(x3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "1e393095-222e-4193-ad32-8962ebed010c",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LinearRegression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "967c2db8-da79-4dfd-aee8-63424f1b7c5e",
   "metadata": {},
   "outputs": [],
   "source": [
    "import statsmodels.formula.api as smf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "e86320db-4cee-4f49-a240-db68ffa5321f",
   "metadata": {
    "collapsed": true,
    "jupyter": {
     "outputs_hidden": true
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Intercept    6.411392e+06\n",
       "x1          -6.950255e+03\n",
       "x2           4.317913e+05\n",
       "x3          -1.737856e+04\n",
       "dtype: float64"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model = smf.ols('y ~ x1 + x2 + x3', data=df)\n",
    "model = model.fit()\n",
    "\n",
    "model.params"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "38f82e5d-f2e8-43ef-990c-00340e94d27f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                      y   R-squared:                       0.366\n",
      "Model:                            OLS   Adj. R-squared:                  0.292\n",
      "Method:                 Least Squares   F-statistic:                     4.994\n",
      "Date:                Tue, 15 Nov 2022   Prob (F-statistic):            0.00723\n",
      "Time:                        14:29:48   Log-Likelihood:                -503.58\n",
      "No. Observations:                  30   AIC:                             1015.\n",
      "Df Residuals:                      26   BIC:                             1021.\n",
      "Df Model:                           3                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "==============================================================================\n",
      "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "Intercept   6.411e+06   7.95e+06      0.807      0.427   -9.93e+06    2.28e+07\n",
      "x1         -6950.2547    2.1e+05     -0.033      0.974   -4.38e+05    4.24e+05\n",
      "x2          4.318e+05   1.94e+05      2.225      0.035    3.28e+04    8.31e+05\n",
      "x3         -1.738e+04   3.96e+04     -0.439      0.664   -9.87e+04     6.4e+04\n",
      "==============================================================================\n",
      "Omnibus:                        2.541   Durbin-Watson:                   2.130\n",
      "Prob(Omnibus):                  0.281   Jarque-Bera (JB):                2.067\n",
      "Skew:                           0.634   Prob(JB):                        0.356\n",
      "Kurtosis:                       2.784   Cond. No.                     1.94e+03\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
      "[2] The condition number is large, 1.94e+03. This might indicate that there are\n",
      "strong multicollinearity or other numerical problems.\n"
     ]
    }
   ],
   "source": [
    "print(model.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "81475787-63a1-4e9f-9625-a1e69f90d530",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1.         0.39404672]\n",
      " [0.39404672 1.        ]]\n"
     ]
    }
   ],
   "source": [
    "print(np.corrcoef(x1, y))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "2966e1e0-07c0-4a49-86a7-c6af60123091",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1.         0.59561084]\n",
      " [0.59561084 1.        ]]\n"
     ]
    }
   ],
   "source": [
    "print(np.corrcoef(x2, y))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "04f1d906-3c04-45ec-b2e7-7b0cfaaae295",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1.         0.48860156]\n",
      " [0.48860156 1.        ]]\n"
     ]
    }
   ],
   "source": [
    "print(np.corrcoef(x3, y))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
