This was a classroom Data.

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "2049df73-6f3b-4b0b-9014-2cd18bcd5aeb",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "1e6d617f-0d38-4849-8fd4-317761fff654",
   "metadata": {
    "collapsed": true,
    "jupyter": {
     "outputs_hidden": true
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    s1it1  s1it2  s1it3  s1it4  s1it5  s1it6  s1it7  s1it8  s1it9  s1it10r  \\\n",
      "0       1      2      2      3      3    2.0      1      1      1        2   \n",
      "1      -3     -2     -1      3      3    2.0     -1      1      1        2   \n",
      "2       1      2      2      3      3    3.0      1      1      2        2   \n",
      "3       2      2      2      2      1    0.0      0      1      1        1   \n",
      "4       1      1      0      2      2    1.0     -1     -2      0        1   \n",
      "..    ...    ...    ...    ...    ...    ...    ...    ...    ...      ...   \n",
      "61      3      3      3      3      1    1.0      1      1      0        1   \n",
      "62      2      2      2      1      0    0.0      0      1      1        1   \n",
      "63      1      2      2      2      2   -1.0      0      0      0        1   \n",
      "64      1      2      2      0      1    0.0     -2     -1      1       -2   \n",
      "65      1      1      1      1      3    2.0      2      2      1        2   \n",
      "\n",
      "    ...  treatment  trtmajor  ymotdif12  ymotdif13   y1dif12   y1dif13  \\\n",
      "0   ...          0         1  -1.083333  -0.250000 -1.333333 -1.000000   \n",
      "1   ...          0         1  -0.833333  -1.500000 -0.666667 -1.000000   \n",
      "2   ...          0         0   0.750000   0.333333  0.333333 -0.666667   \n",
      "3   ...          0         1   0.000000   0.500000  0.000000  0.000000   \n",
      "4   ...          0         1   0.333333   0.833333  1.333333  1.333333   \n",
      "..  ...        ...       ...        ...        ...       ...       ...   \n",
      "61  ...          1         0   0.666667   0.833333  0.000000  0.000000   \n",
      "62  ...          1         0   1.166667   1.083333  1.000000  1.000000   \n",
      "63  ...          1         1   0.083333  -0.416667 -0.666667 -0.666667   \n",
      "64  ...          1         1  -0.333333   1.083333 -2.666667 -0.666667   \n",
      "65  ...          1         1   0.166667   0.333333  0.666667  1.000000   \n",
      "\n",
      "     y2dif12   y2dif13   y3dif12   y3dif13  \n",
      "0  -1.666667 -0.666667 -0.666667  0.333333  \n",
      "1  -3.666667 -4.000000  0.500000 -0.500000  \n",
      "2   0.000000  0.000000  1.333333  1.000000  \n",
      "3   0.000000  0.333333  0.000000  0.833333  \n",
      "4   0.000000  0.333333  0.000000  0.833333  \n",
      "..       ...       ...       ...       ...  \n",
      "61  0.333333  0.666667  1.166667  1.333333  \n",
      "62  2.666667  0.666667  0.500000  1.333333  \n",
      "63  0.333333  0.666667  0.333333 -0.833333  \n",
      "64  0.333333  1.666667  0.500000  1.666667  \n",
      "65 -0.333333  0.000000  0.166667  0.166667  \n",
      "\n",
      "[66 rows x 64 columns]\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "data = pd.read_excel(\"/Users/100355063/Desktop/Python Data/dissdata copy.xlsx\")\n",
    "\n",
    "print(data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "717f38fc-d45d-4346-a38e-5c18e2f93649",
   "metadata": {
    "collapsed": true,
    "jupyter": {
     "outputs_hidden": true,
     "source_hidden": true
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    s1it1  s1it2  s1it3  s1it4  s1it5  s1it6  s1it7  s1it8  s1it9  s1it10r  \\\n",
      "0       1      2      2      3      3    2.0      1      1      1        2   \n",
      "1      -3     -2     -1      3      3    2.0     -1      1      1        2   \n",
      "2       1      2      2      3      3    3.0      1      1      2        2   \n",
      "3       2      2      2      2      1    0.0      0      1      1        1   \n",
      "4       1      1      0      2      2    1.0     -1     -2      0        1   \n",
      "..    ...    ...    ...    ...    ...    ...    ...    ...    ...      ...   \n",
      "61      3      3      3      3      1    1.0      1      1      0        1   \n",
      "62      2      2      2      1      0    0.0      0      1      1        1   \n",
      "63      1      2      2      2      2   -1.0      0      0      0        1   \n",
      "64      1      2      2      0      1    0.0     -2     -1      1       -2   \n",
      "65      1      1      1      1      3    2.0      2      2      1        2   \n",
      "\n",
      "    ...  treatment  trtmajor  ymotdif12  ymotdif13   y1dif12   y1dif13  \\\n",
      "0   ...          0         1  -1.083333  -0.250000 -1.333333 -1.000000   \n",
      "1   ...          0         1  -0.833333  -1.500000 -0.666667 -1.000000   \n",
      "2   ...          0         0   0.750000   0.333333  0.333333 -0.666667   \n",
      "3   ...          0         1   0.000000   0.500000  0.000000  0.000000   \n",
      "4   ...          0         1   0.333333   0.833333  1.333333  1.333333   \n",
      "..  ...        ...       ...        ...        ...       ...       ...   \n",
      "61  ...          1         0   0.666667   0.833333  0.000000  0.000000   \n",
      "62  ...          1         0   1.166667   1.083333  1.000000  1.000000   \n",
      "63  ...          1         1   0.083333  -0.416667 -0.666667 -0.666667   \n",
      "64  ...          1         1  -0.333333   1.083333 -2.666667 -0.666667   \n",
      "65  ...          1         1   0.166667   0.333333  0.666667  1.000000   \n",
      "\n",
      "     y2dif12   y2dif13   y3dif12   y3dif13  \n",
      "0  -1.666667 -0.666667 -0.666667  0.333333  \n",
      "1  -3.666667 -4.000000  0.500000 -0.500000  \n",
      "2   0.000000  0.000000  1.333333  1.000000  \n",
      "3   0.000000  0.333333  0.000000  0.833333  \n",
      "4   0.000000  0.333333  0.000000  0.833333  \n",
      "..       ...       ...       ...       ...  \n",
      "61  0.333333  0.666667  1.166667  1.333333  \n",
      "62  2.666667  0.666667  0.500000  1.333333  \n",
      "63  0.333333  0.666667  0.333333 -0.833333  \n",
      "64  0.333333  1.666667  0.500000  1.666667  \n",
      "65 -0.333333  0.000000  0.166667  0.166667  \n",
      "\n",
      "[66 rows x 64 columns]\n"
     ]
    }
   ],
   "source": [
    "df = pd.DataFrame(data)\n",
    "\n",
    "print(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "c158de2c-ca5d-4ab8-9f88-a39ec8f91834",
   "metadata": {
    "collapsed": true,
    "jupyter": {
     "outputs_hidden": true
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<bound method NDFrame.describe of     s1it1  s1it2  s1it3  s1it4  s1it5  s1it6  s1it7  s1it8  s1it9  s1it10r  \\\n",
       "0       1      2      2      3      3    2.0      1      1      1        2   \n",
       "1      -3     -2     -1      3      3    2.0     -1      1      1        2   \n",
       "2       1      2      2      3      3    3.0      1      1      2        2   \n",
       "3       2      2      2      2      1    0.0      0      1      1        1   \n",
       "4       1      1      0      2      2    1.0     -1     -2      0        1   \n",
       "..    ...    ...    ...    ...    ...    ...    ...    ...    ...      ...   \n",
       "61      3      3      3      3      1    1.0      1      1      0        1   \n",
       "62      2      2      2      1      0    0.0      0      1      1        1   \n",
       "63      1      2      2      2      2   -1.0      0      0      0        1   \n",
       "64      1      2      2      0      1    0.0     -2     -1      1       -2   \n",
       "65      1      1      1      1      3    2.0      2      2      1        2   \n",
       "\n",
       "    ...  treatment  trtmajor  ymotdif12  ymotdif13   y1dif12   y1dif13  \\\n",
       "0   ...          0         1  -1.083333  -0.250000 -1.333333 -1.000000   \n",
       "1   ...          0         1  -0.833333  -1.500000 -0.666667 -1.000000   \n",
       "2   ...          0         0   0.750000   0.333333  0.333333 -0.666667   \n",
       "3   ...          0         1   0.000000   0.500000  0.000000  0.000000   \n",
       "4   ...          0         1   0.333333   0.833333  1.333333  1.333333   \n",
       "..  ...        ...       ...        ...        ...       ...       ...   \n",
       "61  ...          1         0   0.666667   0.833333  0.000000  0.000000   \n",
       "62  ...          1         0   1.166667   1.083333  1.000000  1.000000   \n",
       "63  ...          1         1   0.083333  -0.416667 -0.666667 -0.666667   \n",
       "64  ...          1         1  -0.333333   1.083333 -2.666667 -0.666667   \n",
       "65  ...          1         1   0.166667   0.333333  0.666667  1.000000   \n",
       "\n",
       "     y2dif12   y2dif13   y3dif12   y3dif13  \n",
       "0  -1.666667 -0.666667 -0.666667  0.333333  \n",
       "1  -3.666667 -4.000000  0.500000 -0.500000  \n",
       "2   0.000000  0.000000  1.333333  1.000000  \n",
       "3   0.000000  0.333333  0.000000  0.833333  \n",
       "4   0.000000  0.333333  0.000000  0.833333  \n",
       "..       ...       ...       ...       ...  \n",
       "61  0.333333  0.666667  1.166667  1.333333  \n",
       "62  2.666667  0.666667  0.500000  1.333333  \n",
       "63  0.333333  0.666667  0.333333 -0.833333  \n",
       "64  0.333333  1.666667  0.500000  1.666667  \n",
       "65 -0.333333  0.000000  0.166667  0.166667  \n",
       "\n",
       "[66 rows x 64 columns]>"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.describe"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "07f153a3-e32e-4884-9892-8171fba62deb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 66 entries, 0 to 65\n",
      "Data columns (total 64 columns):\n",
      " #   Column     Non-Null Count  Dtype  \n",
      "---  ------     --------------  -----  \n",
      " 0   s1it1      66 non-null     int64  \n",
      " 1   s1it2      66 non-null     int64  \n",
      " 2   s1it3      66 non-null     int64  \n",
      " 3   s1it4      66 non-null     int64  \n",
      " 4   s1it5      66 non-null     int64  \n",
      " 5   s1it6      64 non-null     float64\n",
      " 6   s1it7      66 non-null     int64  \n",
      " 7   s1it8      66 non-null     int64  \n",
      " 8   s1it9      66 non-null     int64  \n",
      " 9   s1it10r    66 non-null     int64  \n",
      " 10  s1it11r    66 non-null     int64  \n",
      " 11  s1it12     66 non-null     int64  \n",
      " 12  s1ymot     66 non-null     float64\n",
      " 13  s1y1       66 non-null     float64\n",
      " 14  s1y2       66 non-null     float64\n",
      " 15  s1y3       66 non-null     float64\n",
      " 16  s2it1      66 non-null     int64  \n",
      " 17  s2it2      66 non-null     int64  \n",
      " 18  s2it3      65 non-null     float64\n",
      " 19  s2it4      66 non-null     int64  \n",
      " 20  s2it5      66 non-null     int64  \n",
      " 21  s2it6      66 non-null     int64  \n",
      " 22  s2it7      66 non-null     int64  \n",
      " 23  s2it8      66 non-null     int64  \n",
      " 24  s2it9      66 non-null     int64  \n",
      " 25  s2it10r    66 non-null     int64  \n",
      " 26  s2it11r    66 non-null     int64  \n",
      " 27  s2it12     66 non-null     int64  \n",
      " 28  s2ymot     66 non-null     float64\n",
      " 29  s2y1       66 non-null     float64\n",
      " 30  s2y2       66 non-null     float64\n",
      " 31  s2y3       66 non-null     float64\n",
      " 32  s3it1      66 non-null     int64  \n",
      " 33  s3it2      66 non-null     int64  \n",
      " 34  s3it3      66 non-null     int64  \n",
      " 35  s3it4      66 non-null     int64  \n",
      " 36  s3it5      66 non-null     int64  \n",
      " 37  s3it6      65 non-null     float64\n",
      " 38  s3it7      66 non-null     int64  \n",
      " 39  s3it8      66 non-null     int64  \n",
      " 40  s3it9      65 non-null     float64\n",
      " 41  s3it10r    66 non-null     int64  \n",
      " 42  s3it11r    66 non-null     int64  \n",
      " 43  s3it12     65 non-null     float64\n",
      " 44  s3ymot     66 non-null     float64\n",
      " 45  s3y1       66 non-null     float64\n",
      " 46  s3y2       66 non-null     float64\n",
      " 47  s3y3       66 non-null     float64\n",
      " 48  major      66 non-null     int64  \n",
      " 49  male       66 non-null     int64  \n",
      " 50  race       66 non-null     int64  \n",
      " 51  lab        66 non-null     int64  \n",
      " 52  survey     66 non-null     int64  \n",
      " 53  block      66 non-null     int64  \n",
      " 54  treatment  66 non-null     int64  \n",
      " 55  trtmajor   66 non-null     int64  \n",
      " 56  ymotdif12  66 non-null     float64\n",
      " 57  ymotdif13  66 non-null     float64\n",
      " 58  y1dif12    66 non-null     float64\n",
      " 59  y1dif13    66 non-null     float64\n",
      " 60  y2dif12    66 non-null     float64\n",
      " 61  y2dif13    66 non-null     float64\n",
      " 62  y3dif12    66 non-null     float64\n",
      " 63  y3dif13    66 non-null     float64\n",
      "dtypes: float64(25), int64(39)\n",
      "memory usage: 33.1 KB\n"
     ]
    }
   ],
   "source": [
    "data.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "30f35224-d52a-48f2-bba1-0cb766441302",
   "metadata": {
    "collapsed": true,
    "jupyter": {
     "outputs_hidden": true
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[-1.08333333 -0.83333333  0.75        0.          0.33333333  0.33333333\n",
      " -0.41666667  1.16666667  1.08333333  0.16666667  1.          0.16666667\n",
      " -0.41666667 -0.41666667 -2.01515152  0.41666667  0.41666667 -0.5\n",
      " -1.5         0.83333333  0.54545455 -0.33333333 -0.58333333  0.75\n",
      " -0.16666667  0.16666667  0.08333333 -1.16666667  0.5         1.33333333\n",
      "  0.83333333  0.16666667 -0.16666667  1.5         0.33333333  0.58333333\n",
      "  0.5         1.41666667  0.16666667 -0.08333333 -0.16666667  0.5\n",
      "  0.25       -1.          0.33333333  0.25       -0.58333333 -0.47727273\n",
      " -0.25        0.25       -0.16666667 -0.66666667  1.66666667 -0.08333333\n",
      " -0.75       -1.83333333 -1.83333333 -0.58333333 -0.41666667  0.58333333\n",
      "  0.08333333  0.66666667  1.16666667  0.08333333 -0.33333333  0.16666667]\n"
     ]
    }
   ],
   "source": [
    "y = np.array(df['ymotdif12'])\n",
    "\n",
    "print(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "bd3cb762-7e93-4477-af46-cd11385517b2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "66"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "10ceaeb4-7d25-4b81-967a-81efe39f23e2",
   "metadata": {
    "collapsed": true,
    "jupyter": {
     "outputs_hidden": true
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1 1 1 1 1 0 1 0 1 1 0 1 1 0 1 1 1 1 1 1 1 1 1 1 0 1 1 0 1 1 1 1 1 1 1 0 0\n",
      " 0 0 0 0 0 0 0 0 1 1 1 1 0 1 1 0 1 1 1 1 1 1 1 1 0 0 1 1 0]\n"
     ]
    }
   ],
   "source": [
    "xgen = np.array(df['male'])\n",
    "\n",
    "print(xgen)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "a042a777-bf68-4d04-8a3e-ecae77aba3b6",
   "metadata": {},
   "outputs": [],
   "source": [
    "xmaj = np.array(df['major'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "02257dbc-1b1a-4c80-b21f-9e4b41beb8be",
   "metadata": {},
   "outputs": [],
   "source": [
    "xtrt = np.array(df['treatment'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "d3067e37-b110-46b6-a992-0a745c0376d4",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LinearRegression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "0af47fdd-ee57-4b63-8b14-2690e9587106",
   "metadata": {},
   "outputs": [],
   "source": [
    "import statsmodels.formula.api as smf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "56113834-6558-4fed-a617-483fc211375d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Intercept    0.264553\n",
       "xgen        -0.411431\n",
       "xmaj         0.016109\n",
       "xtrt         0.045863\n",
       "dtype: float64"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model = smf.ols('y ~ xgen + xmaj + xtrt', data=df)\n",
    "model = model.fit()\n",
    "\n",
    "model.params"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "37693227-7588-4d05-bf1e-b8e8b56317d3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                      y   R-squared:                       0.070\n",
      "Model:                            OLS   Adj. R-squared:                  0.025\n",
      "Method:                 Least Squares   F-statistic:                     1.559\n",
      "Date:                Tue, 15 Nov 2022   Prob (F-statistic):              0.208\n",
      "Time:                        16:14:09   Log-Likelihood:                -74.988\n",
      "No. Observations:                  66   AIC:                             158.0\n",
      "Df Residuals:                      62   BIC:                             166.7\n",
      "Df Model:                           3                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "==============================================================================\n",
      "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "Intercept      0.2646      0.311      0.850      0.398      -0.357       0.886\n",
      "xgen          -0.4114      0.228     -1.806      0.076      -0.867       0.044\n",
      "xmaj           0.0161      0.071      0.226      0.822      -0.126       0.158\n",
      "xtrt           0.0459      0.198      0.232      0.818      -0.350       0.442\n",
      "==============================================================================\n",
      "Omnibus:                        2.262   Durbin-Watson:                   1.530\n",
      "Prob(Omnibus):                  0.323   Jarque-Bera (JB):                1.673\n",
      "Skew:                          -0.381   Prob(JB):                        0.433\n",
      "Kurtosis:                       3.171   Cond. No.                         11.4\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
     ]
    }
   ],
   "source": [
    "print(model.summary())"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
